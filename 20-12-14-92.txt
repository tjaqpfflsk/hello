1.Object 클래스에 대하여 설명하시오.
﻿
- 컴파일러가 우리 모르게 해준다.

- 그러므로 우리는 Object 클래스를 사용할 수 있다.

- Object 클래스의 데이터 멤버는 없고 함수가 11개가 들어 있다.

- toString( ) 함수를 우리가 지정하지 않고 사용할 수 있었던 이유도 Object 안에 있기 때문이다.

﻿

2.아래와 같이 출력되는 이유를 하시오.

class A {
	
	 @Override
	 public String toString() {
		
		 return "이것은 A 클래스 입니다.";
	 }	
}

public class TestMain {
	public static void main(String[] args) {
		A a  = new A();
		System.out.println(a);
		
	   }		
}
===============
이것은 A 클래스 입니다.
---------------------------------------------------------------------------------------------------------
원래 모든 클래스는 Object 클래스를 상속 받아서 메모리에 올라간 값을 문자열로 바꾸어주는데 
(A클래스 안에 들어가 있는 주소 값을 예를 들어 A@54bedef2 이런 식으로 출력되는데 )
클래스 A에서 오버라이딩해서 클래스 A에 있는 toString 함수가 호출 되었기 때문이다.

3. class 이름 및 함수 에서 final 의 의미는?
- final class 
public final class MyLastCLS{     } //-> final 붙인 클래스는 다른 클래스가 상속할 수 없다.

- final 함수
class Simple{
    public final void func(int n){          }  
//-> final 붙인 함수는 다른 클래스에서 오버라이딩 할 수 없다.
}

4.연습문제 7-22 번을 푸시오.
abstract class Shape {
	Point p;

	Shape() {
		this(new Point(0, 0));// 여기 안에다가 new를 적어서 객체를 생성했네
	}

	Shape(Point p) {
		this.p = p;
	}

	abstract double calcArea();// 도형의 면적을 계산해서 반환하는 매서드

	Point getPosition() {
		return p;
	}

	void setPosition(Point p) {
		this.p = p;
	}
}

class Point {
	int x;
	int y;

	Point() {
		this(0, 0);
	}

	Point(int x, int y) {
		this.x = x;
		this.y = y;
	}

	public String toString() {
		return "[" + x + "," + y + "]";
	}
}

class Circle extends Shape {
	private double r;

	public Circle() {
	}

	@Override
	public double calcArea() {
		return r * r * Math.PI;
	}
}

class Rectangle extends Shape {
	private double width;
	private double height;

	public Rectangle() {

	}

	@Override
	public double calcArea() {
		return width * height;
	}

	public boolean isSquare() {
		return ((width != 0 && height != 0) && (width == height));
	}
}

public class TestMain2 {
	public static void main(String[] args) {

	}
}

5.연습문제 7-23 번을 푸시오.

abstract class Shape {
	Point p;

	Shape() {
		this(new Point(0, 0));// 여기 안에다가 new를 적어서 객체를 생성했네
	}

	Shape(Point p) {
		this.p = p;
	}

	abstract double calcArea();// 도형의 면적을 계산해서 반환하는 매서드

	Point getPosition() {
		return p;
	}

	void setPosition(Point p) {
		this.p = p;
	}
}

class Point {
	int x;
	int y;

	Point() {
		this(0, 0);
	}

	Point(int x, int y) {
		this.x = x;
		this.y = y;
	}

	public String toString() {
		return "[" + x + "," + y + "]";
	}
}

class Circle extends Shape {
	private double r;

	public Circle(double r) {
		this.r = r;
	}

	@Override
	public double calcArea() {
		return r * r * Math.PI;
	}
}

class Rectangle extends Shape {
	private double width;
	private double height;

	public Rectangle(double width, double height) {
		this.height = height;
		this.width = width;
	}

	@Override
	public double calcArea() {
		return width * height;
	}

	public boolean isSquare() {
		return ((width != 0 && height != 0) && (width == height));
	}
}

public class TestMain {
	
	public static double sumArea(Shape[] arr) {
		double sum = 0;
		for(int i = 0; i < arr.length ; i++) {
			sum += arr[i].calcArea();
		}
		return sum;
	}
	public static void main(String[] args) {
		Shape[]arr = {new Circle(5.0),new Rectangle(3,4),new Circle(1)};
		System.out.println("면적의 합: "+sumArea(arr));
	}

}


6. interface 와 class 의 차이는?
  interface와 class 는 공통적으로 데이터 멤버와 함수를 가지는데 차이로는 interface 는 데이터 멤버로 보통 상수가 오며
  함수에는 구현부분(몸)이 없다.(함수선언) class 자리에 interface 가 오게 된다. 
* Printable p = new Printable; 은 불가능하다. 하지만
* Printable p; 이렇게 참조 변수 선언은 가능하다.

interface Printable{
	abstract void printLine(String str);
}//구현할 부분이 없으면 abstract를 넣어주어야 하는데 안 넣어주어도 되도록 만들었다. 

7. 다음을 프로그램 하시오.[필수]
interface Printable { // MS가 정의하고 제공한 인터페이스
   public void print(String doc);
}
 SPrinterDriver 와 LPrinterDriver를 만드시오
======================

public static void main(String[] args) {
   String myDoc = "This is a report about...";
   
   // 삼성 프린터로 출력
   Printable prn = new SPrinterDriver();
   prn.print(myDoc);
   System.out.println();

   // LG 프린터로 출력
   prn = new LPrinterDriver();
   prn.print(myDoc);
}
================================================
출력: From Samsung printer
This is a report about ...

From LG printer
This is a report about ...
==================================

interface Printable { // MS가 정의하고 제공한 인터페이스
	public void print(String doc);
}

class SPrinterDriver implements Printable{
	@Override
	public void print(String doc) {
		System.out.println("From Samsung printer");
		System.out.println(doc);
	}
}
class LPrinterDriver implements Printable{
	@Override
	public void print(String doc) {
		System.out.println("From LG printer");
		System.out.println(doc);
	}
}

public class TestMain {

	public static void main(String[] args) {
		String myDoc = "This is a report about...";

		// 삼성 프린터로 출력
		Printable prn = new SPrinterDriver();
		prn.print(myDoc);
		System.out.println();

		// LG 프린터로 출력
		prn = new LPrinterDriver();
		prn.print(myDoc);
	}
}


8.@Override 에 대하여 설명하시오.
상위 클래스의 메소드를 오버라이딩 하는 것이 목적이라는 선언 하는 것이고
오버라이딩을 하는 형태가 아니면 컴파일러가 오류 메시지 전달 한다.

9.interface 에 대하여 설명하시오.
interface 는 데이터 멤버로 보통 상수가 오며 함수에는 구현부분(몸)이 없다.(함수선언) class 자리에 interface 가 오게 된다. 
* Printable p = new Printable; 은 불가능하다. 하지만
* Printable p; 이렇게 참조 변수 선언은 가능하다.

10.interface에 올 수 있는 두가지는?
상수와 추상적 메소드가 올 수 있다.

11.abstract 키워드에 대하여 설명하시오.
  인터페이스에 안에 오게 되는 메소드는 구현하는 내용이 없는 함수가 오게 되고 이 함수를 추상적 메소드라고 한다.
  그래서 추상적인 이라는 abstract를 넣어주어야 하는데 안 넣어주어도 되도록 만들었다. 
interface Printable{
	abstract void printLine(String str);
}

12. 아래의 출력 결과가 아래와 같이 나오도록 프로그래밍 하시오.
Object obj = new Circle(10);
System.out.println(obj);
=================
출력: 넓이는 100 입니다.
-----------------------------------------------------------------------------------------
class Circle {
	private int radius;
	
	public Circle(int radius) {
		this.radius = radius;
	}
	 @Override
	 public String toString() {
		 return "출력 : 넓이는 "+(radius * radius * Math.PI)+"입니다.";
	 }	
}//class end

public class TestMain1 {
	public static void main(String[] args) {
		Object obj = new Circle(10);
		System.out.println(obj);

	   }//main end
}//class main


13. 아래의 메모리를 그리시오.
class MobilePhone {
    protected String number;
    
    public MobilePhone(String num) {
        number = num;
    }    
    public void answer() {
        System.out.println("Hi~ from " + number);
    }
}

class SmartPhone extends MobilePhone { 
    private String androidVer;
    
    public SmartPhone(String num, String ver) {
        super(num);
        androidVer = ver;
    }    
    public void playApp() {
        System.out.println("App is running in " + androidVer);
    }
}
=======================================
	MobilePhone phone = new SmartPhone("010-555-777", "Nougat");
    	phone.answer();    	
    	SmartPhone s = (SmartPhone)phone;    	
    	s.playApp();
